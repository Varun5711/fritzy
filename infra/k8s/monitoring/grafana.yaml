apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      editable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  microservices.json: |
    {
      "dashboard": {
        "title": "Fritzy Microservices",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{service}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Response Time (p95)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "{{service}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\"}[5m])",
                "legendFormat": "{{service}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{namespace=\"fritzy\"}[5m])",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 5,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{namespace=\"fritzy\"}",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 6,
            "title": "Active Connections",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(pg_stat_activity_count)"
              }
            ]
          }
        ]
      }
    }
  postgres.json: |
    {
      "dashboard": {
        "title": "PostgreSQL Metrics",
        "panels": [
          {
            "id": 1,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends",
                "legendFormat": "{{datname}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Transaction Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(pg_stat_database_xact_commit[5m])",
                "legendFormat": "commits"
              },
              {
                "expr": "rate(pg_stat_database_xact_rollback[5m])",
                "legendFormat": "rollbacks"
              }
            ]
          },
          {
            "id": 3,
            "title": "Replication Lag",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_replication_lag",
                "legendFormat": "{{application_name}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "Cache Hit Ratio",
            "type": "gauge",
            "targets": [
              {
                "expr": "pg_stat_database_blks_hit / (pg_stat_database_blks_hit + pg_stat_database_blks_read)"
              }
            ]
          }
        ]
      }
    }
  elasticsearch.json: |
    {
      "dashboard": {
        "title": "Elasticsearch Metrics",
        "panels": [
          {
            "id": 1,
            "title": "Cluster Health",
            "type": "stat",
            "targets": [
              {
                "expr": "elasticsearch_cluster_health_status"
              }
            ]
          },
          {
            "id": 2,
            "title": "Index Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(elasticsearch_indices_indexing_index_total[5m])",
                "legendFormat": "{{cluster}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Search Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(elasticsearch_indices_search_query_total[5m])",
                "legendFormat": "{{cluster}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "JVM Heap Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "elasticsearch_jvm_memory_used_bytes{area=\"heap\"}",
                "legendFormat": "{{node}}"
              }
            ]
          }
        ]
      }
    }
